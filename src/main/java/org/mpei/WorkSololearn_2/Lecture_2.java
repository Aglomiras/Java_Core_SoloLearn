package org.mpei.WorkSololearn_2;

import java.util.ArrayList;
import java.util.List;

public class Lecture_2 {
    public static void main(String[] args) {
        /**
         * -----УСЛОВНЫЕ ОПЕРАТОРЫ-----
         * Условные операторы используются для выполнения различных действий, основанных на различных условиях.
         *
         * Выражение if является одним из наиболее часто используемых выражений.
         * Если выражение условного оператора if является истинным, то будет выполнен блок кода внутри выражения if.
         * Если выражение окажется ложным, то будет выполнен код, находящийся сразу после конца выражения if (после закрывающей фигурной скобки).
         *
         * Любой из следующих операторов сравнения может быть использован для формирования условия:
         * < меньше чем
         * > больше чем
         * != не равно
         * == равно
         * <= меньше, либо равно
         * >= больше, либо равно
         *
         * Не забывайте, что использовать два знака равно (==) необходимо для проверки на равенство, а одиночный знак равенства является оператором присваивания.
         * Пример:
         * */
        int x = 7;
        if (x < 42) {
            System.out.println("Hi");
        }
        /**
         * После оператора if может следовать опциональный оператор else, который выполняется, когда условие оказывается ложным.
         * Так как переменная age равна 30, то условие if оказывается ложным и выполняется оператор else.
         * */
        int age = 30;
        if (age < 16) {
            System.out.println("Too Young");
        } else {
            System.out.println("Welcome!");
        }
        /**
         * -----ВЛОЖЕННЫЕ ОПЕРАТОРЫ if-----
         * Вы можете использовать один оператор if-else внутри другого оператора if или else.
         * Вы можете вкладывать столько операторов if-else сколько вам необходимо.
         * Пример:
         * */
        int age1 = 25;
        if (age1 > 0) {
            if (age1 > 16) {
                System.out.println("Welcome!");
            } else {
                System.out.println("Too Young");
            }
        } else {
            System.out.println("Error");
        }
        /**
         * -----ОПЕРАТОР else if-----
         * Вместо использования вложенных операторов if-else, вы можете использовать оператор else if для проверки множества условий.
         * Вы можете включать столько операторов else if, сколько вам необходимо.
         * Например:
         * */
        int age2 = 25;
        if (age2 <= 0) {
            System.out.println("Error");
        } else if (age2 <= 16) {
            System.out.println("Too Young");
        } else if (age2 < 100) {
            System.out.println("Welcome!");
        } else {
            System.out.println("Really?");
        }
        /**
         * -----ЛОГИЧЕСКИЕ ОПЕРАТОРЫ-----
         * Логические операторы используются для комбинирования множества условий.
         * Скажем, вы хотели бы, чтобы ваша программа выводила "Welcome!" только когда переменная age больше 18 и переменная money больше 500.
         *
         * Одним способом выполнения этого является использование вложенных операторов if:
         * */
        int money = 799;
        if (age > 18) {
            if (money > 500) {
                System.out.println("Welcome!");
            }
        }
        /**
         * Однако, использование логического оператора И (&&) является способом лучше:
         * */
        if (age > 18 && money > 500) {
            System.out.println("Welcome!"); //Если все операнды оператора И истинны, то условие будет истинным.
        }
        /**
         * -----ОПЕРАТОР ИЛИ-----
         * Оператор ИЛИ (||) проверяет, истинно ли какое-нибудь из условий.
         * Условие будет истинным, если любой из операндов будет истинным.
         * Например:
         * */
        int age11 = 25;
        int money11 = 100;
        if (age11 > 18 || money11 > 500) {
            System.out.println("Welcome!");
        }
        /**
         * Вышеуказанный код выведет "Welcome!", если значение переменной age больше 18 или если значение переменной money больше 500.
         * Логический оператор НЕ (!) используется для установки противоположного логического состояния его операнда.
         * Если условие верно, то логический оператор НЕ сделает его ложным.
         * Пример:
         * */
        int age5 = 25;
        if (!(age5 > 18)) { //!(age > 18) читается, как "если age НЕ больше чем 18".
            System.out.println("Too Young");
        } else {
            System.out.println("Welcome");
        }
        /**
         * -----ОПЕРАТОР switch-----
         * Оператор switch проверяет переменную на равенство списку значений. Каждое значение называется case(случаем),
         * и переменная оператора switch проверяется с каждым случаем.
         *
         * Синтаксис:
         * */
        int expression = 2;
        switch (expression) {
            case 1:
                //Statements
                break; //optional
            case 2:
                //Statements
                break; //optional
            //You can have any number of case statements.
            default: //Optional
                //Statements
        }
        /**
         * - Если переменная оператора switch равна case, то выражения этого case будут выполняться до достижения оператора break.
         * - Когда достигается оператор break, оператор switch завершается, поток управления переходит на следующую строку после оператора switch.
         * - Не каждый case должен содержать оператор break. Если не встретился оператор break,
         * то поток управления пройдет через несколько операторов case, пока не будет достигнут оператор break.
         *
         * В примере ниже проверяется переменная day на соответствие с набором значений и выводится соответствующее сообщение.
         * */
        int day = 3;
        switch (day) {
            case 1:
                System.out.println("Monday");
                break;
            case 2:
                System.out.println("Tuesday");
                break;
            case 3:
                System.out.println("Wednesday");
                break;
        }
        /**
         * Вы можете иметь любое количество операторов case внутри switch.
         * После каждого оператора case следует значение для сравнения и двоеточие.
         *
         * Выражение switch может иметь опциональный оператор default.
         * Оператор default может использоваться для выполнения задания, когда нет соответствий ни с одним из условий.
         * */
        int day1 = 3;
        switch (day1) {
            case 6:
                System.out.println("Saturday");
                break;
            case 7:
                System.out.println("Sunday");
                break;
            default:
                System.out.println("Weekday");
        }
        /**
         * Оператор break не нужен в случае default, потому что он всегда является последним оператором в выражении switch.
         *
         * Switch-выражение допускает несколько значений, разделенных запятыми,
         * для каждого случая и возвращает значение для всего блока switch-case.
         * */
        String dayType = switch (day) { //switch-выражение делает блок switch-case намного короче и не использует оператор break.
            case 1, 2, 3, 4, 5 -> "Working day";
            case 6, 7 -> "Weekend";
            default -> "Invalid day";
        };
        /**
         * -----ЦИКЛ while-----
         * Цикл (loop) позволяет вам повторно выполнять выражение, или группу выражений.
         * Выражение цикла while повторно выполняется, пока заданное условие истинно.
         * */
        int p = 3;
        while (p > 0) {
            System.out.println(p);
            p--;
        }
        /**
         * Цикл while проверяет условие p > 0.
         * Если оно истинно, то выполняются выражения в теле цикла.
         * Затем выражение проверяется снова и повторяется цикл.
         *
         * Обратите внимание на выражение p--. Оно декрементирует переменную p при каждом запуске цикла, и останавливает цикл, когда p равно 0.
         * Без этого выражения цикл будет запускаться без остановки.
         *
         * Если при проверке выражения результат оказывается ложным, то тело цикла пропускается и будет выполнено первое выражение после цикла while.
         * */
        int x1 = 6;
        while (x1 < 10) {
            System.out.println(x1);
            x1++;
        }
        System.out.println("Loop ended"); //Обратите внимание, что последний метод print выходит за пределы области while.
        /**
         * -----ЦИКЛ for-----
         * Еще одной цикличной структурой является цикл for.
         * Цикл for позволяет вам эффективно создавать циклы, которые должны быть запущены определенное количество раз.
         * */
        /*
        for (initialization; condition; increment/decrement) {
            statement(s)
        }*/
        /**
         * Initialization(Инициализация): Выражение выполняется только один раз в начале цикла
         * Condition(Условие): Выполняется при каждой итерации цикла. Цикл выполняет выражение повторно, пока условие не будет ложным.
         * Increment/Decrement(Инкремент/Декремент): Выполняется после каждой итерации цикла.
         *
         * Следующий пример выводит числа от 1 до 5.
         * */
        for (int x2 = 1; x2 <= 5; x2++) {
            System.out.println(x2);
        }
        /**
         * Переменная x инициализируется значением 1, и повторно выводит значение переменной x,
         * пока условие x<=5 не станет ложным. При каждой итерации выполняется выражение x++, инкрементирующее x на единицу.
         *
         * У вас может быть любой тип условия и любой тип инкремента в цикле for.
         * Лучше всего использовать цикл for, когда начальные и конечные значения известны.
         * */
        /**
         * -----ЦИКЛ do...while-----
         * Цикл do...while похож на цикл while, за исключением того, что цикл do...while гарантированно запустится по меньшей мере один раз.
         * */
        int w = 1;
        do {
            System.out.println(w);
            w++;
        } while (w < 5);
        /**
         * Обратите внимание, что условие появляется в конце цикла, так что выражения цикла выполняются один раз до проверки условия.
         * Даже если условие ложно, коды выполнится один раз.
         * Обратите внимание, что в do...while циклах while - это просто условие и не оно имеет тела.
         *
         * -----ОПЕРАТОРЫ УПРАВЛЕНИЯ ЦИКЛОВ-----
         * Операторы break и continue изменяют ход выполнения цикла.
         * Оператор break заканчивает цикл и переводит выполнение к выражению, следующему за циклом.
         * */
        int c = 1;
        while (c > 0) {
            System.out.println(c);
            if (c == 4) {
                break;
            }
            c++;
        }
        /**
         * Оператор continue заставляет цикл пропустить остаток его тела и затем немедленно протестировать его условие до переитерации.
         * Другими словами, он заставляет цикл перейти к следующей итерации.
         * */
        for (int xx = 10; xx <= 40; xx = xx + 10) {
            if (xx == 30) {
                continue;
            }
            System.out.println(xx);
        }
        /**
         * Как видите, в вышеуказанном коде пропускается значение, равное 30, из-за оператора continue.
         * */
    }
}
