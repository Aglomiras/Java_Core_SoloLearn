package org.mpei.WorkSololearn_6;

public class Lecture_6 {
    public static void main(String[] args) {
        /**
         * -----ИНКАПСУЛЯЦИЯ-----
         * Существует 4 основные концепции ООП: инкапсуляция, наследование, полиморфизм, и абстракция.
         *
         * Идея инкапсуляции состоит в обеспечении невидимости для пользователей деталей реализации.
         * Переменные одного класса будут скрыты от других классов, а доступ к ним может быть получен только с помощью методов текущего класса.
         * Это называется скрытием данных.
         *
         * Чтобы достичь инкапсуляции в Java, объявите переменные класса с модификатором private и добавьте публичные методы setter и getter,
         * для модификации и отображения значений переменных.
         *
         * Пример инкапсуляции рассмотрен в папке Starter
         *
         * В общем, инкапсуляция предоставляет следующие преимущества:
         * - Управление способом получения доступа к информации и ее модификации
         * - Более гибкое и простое изменение кода
         * - Способность изменять одну часть кода, не влияя на другие части
         *
         * -----НАСЛЕДОВАНИЕ-----
         * Наследование это процесс, который позволяет одному классу получить свойства (методы и переменные) другого класса.
         * С наследованием, информация размещается в более удобном, иерархическом порядке.
         *
         * Класс, наследующий свойства другого является подклассом (также называется производным классом, или классом ребенком);
         * класс, чьи свойства наследуются, является суперклассом (базовым классом, или родительским классом).
         *
         * Чтобы наследоваться от класса, используйте ключевое слово extends.
         *
         * В следующем примере отображено, как наследовать класс Dog от класса Animal.
         * В данном случае, Dog является подклассом, а Animal является суперклассом.
         * Пример рассмотрен в папке Starter_1
         *
         * Когда один класс наследуется от другого класса, он наследует все не-приватные переменные и методы суперкласса.
         * Пример также рассмотрен в папке Starter_1
         *
         * Вызов модификатора доступа protected делает переменные видимыми только для подклассов.
         *
         * Конструкторы не наследуются подклассами. Однако, конструктор суперкласса вызывается при инстанцировании подкласса.
         * Пример рассмотрен в папке Starter_2
         * Вы можете получить доступ к суперклассу из подкласса с помощью ключевого слова super.
         * Например, super.var получает доступ к переменной var суперкласса.
         *
         * -----ПОЛИМОРФИЗМ-----
         * Полиморфизм, ссылающийся на идею "наличия множества форм", возникает при наличии иерархии классов, связанных друг с другом наследованием.
         * Вызов члена метода произведет различное выполнение, в зависимости от типа объекта, вызывающего метод.
         *
         * Например: Dog и Cat являются классами, которые наследуются от класса Animal.
         * Каждый класс имеет свою собственную реализацию метода makeSound().
         * Пример рассмотрен в папке Starter_3
         * */

    }
}
