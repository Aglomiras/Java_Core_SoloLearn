package org.mpei.WorkSololearn_4;

public class Lecture_4 {
    public static void main(String[] args) {
        /**
         * -----ОБЪЕКТНО-ОРИЕНТИРОВАННОЕ ПРОГРАММИРОВАНИЕ-----
         * Java использует Объектно-Ориентированное Программирование (ООП), стиль программирования,
         * который предназначен, чтобы сделать мышление о программировании ближе к мышлению о реальном мире.
         * В ООП, каждый объект является независимой единицей с уникальным идентификатором, также, как и объекты в реальном мире.
         *
         * Яблоко является объектом; также и кружка. Каждый имеет свой уникальный идентификатор.
         * Может быть две кружки, которые будут очень похожи друг на друга, но они все равно разные, уникальные объекты.
         *
         * Объекты также имеют характеристики, которые используются для их описания.
         * Например, машина может быть красной или синей, кружка может быть полной или пустой, и так далее.
         * Эти характеристики также называются атрибутами. Атрибут описывает текущее состояние объекта.
         *
         * В реальном мире каждый объект ведет себя по-своему. Машина движется, телефон звонит и так далее.
         * То же самое касается и объектов: поведение специфично объекту типу объекта.
         *
         * В общем, в объектно-ориентированном программировании, каждый объект имеет три измерения: идентификатор, атрибуты, и поведение.
         * Атрибуты описывают текущее состояние объекта, и что объект способен делать демонстрируется через поведение объекта.
         *
         * -----КЛАССЫ-----
         * Класс описывает каким будет объект, но отделен от самого объекта.
         * Другими словами, классы можно назвать проектами, описаниями, или определениями для объекта.
         * Вы можете использовать один и тот же класс в качестве проекта для создания множества объектов.
         * Первым шагом является определение класса, что затем становится проектом для создания объекта.
         *
         * Каждый класс имеет имя, которое используется для определения атрибутов и поведения.
         * Другими словами, объект является экземпляром класса.
         *
         * -----МЕТОДЫ-----
         * Методы определяют поведение. Метод является коллекцией выражений, сгруппированных вместе для выполнения действия.
         * System.out.println() является примером метода.
         * Вы можете определить свои собственные методы для выполнения желаемых действий.
         *
         * Пример метода можно посмотреть в классе Lecture_4_1
         *
         * Вы можете вызвать метод любое количество раз. При запуске метода код перескакивает в место,
         * где метод был определен, выполняет код внутри него, а затем возвращается обратно и выполняет последующие строки.
         * Пример:
         * */
        /*
        * class MyClass {
              static void sayHello() {
                System.out.println("Hello World!");
            }
            public static void main(String[ ] args) {
                sayHello();
                sayHello();
                sayHello();
            }
          }*/
        /**
         * В случаях, подобных случаям выше, где одно и то же повторяется снова и снова, вы можете достичь такого же результата, используя циклы (while или for).
         *
         * Вы также можете создать метод, который принимает некоторую информацию, называемую параметрами, при его вызове.
         * Параметры методов необходимо указывать внутри круглых скобок.
         * Например, мы можем модифицировать наш метод sayHello(), чтобы он принимал параметр String.
         * Пример данного метода можно посмотреть в классе Lecture_4_2
         * */
        /**
         * -----ВОЗВРАЩАЕМЫЙ ТИП-----
         * Ключевое слово return может быть использовано в методах для возвращения значения.
         * Например, мы можем определить метод sum, который возвращает сумму его двух параметров.
         * */
        /*
        * static int sum(int val1, int val2) {
             return val1 + val2;
          }*/
        /**
         * Обратите внимание, что в описании метода мы указали возвращаемый тип до определения имени метода.
         * Для нашего метода sum, типом является int, так как он принимает два параметра типа int и возвращает их сумму,
         * которая также имеет тип int.
         * Пример использование данного метода, можно увидеть в классе Lecture_4_3
         *
         * Следующий пример рассмотрен в классе Lecture_4_4
         * Следующий пример рассмотрен в классе Lecture_4_5
         *
         * Значения, передаваемые в качестве параметров, называются аргументами.
         * Обратите внимание, что аргументы должны соответствовать параметрам и передаваться в том же порядке.
         * */
        /**
         * -----ОПРЕДЕЛЕНИЕ АТРИБУТОВ-----
         * Класс имеет атрибуты и методы. Атрибуты являются переменными внутри класса.
         * Давайте создадим класс Vehicle с соответствующими атрибутами и методами.
         * Пример будет разобран в папке Finish_1
         *
         * -----МОДИФИКАТОРЫ ДОСТУПА-----
         * Теперь давайте обсудим ключевое слово public перед методом main.
         *
         * public static void main(String[ ] args)
         * JAVA
         * public является модификатором доступа, что означает, что он используется для установки уровня доступа.
         * Вы можете использовать модификаторы доступа для классов, атрибутов и методов.
         *
         * В случае с классами, доступными модификаторами являются public или default, как описано ниже:
         * public: к классу может быть получен доступ любым другим классом.
         * default: к классу может быть получен доступ только классами из одного пакета (package).
         *
         * Следующие варианты доступны для атрибутов и методов:
         * default: атрибут или метод, объявленный без модификатора ограничения доступа, доступен для любого другого класса в том же пакете (package).
         * public: доступ может быть получен из любого класса.
         * protected: обеспечивает такой же доступ, как и модификатор default, с добавлением, что подкласс может получить
         * доступ к protected методам и переменным суперкласса.
         * private: доступ может быть получен только изнутри этого объявленного класса.
         *
         * Оставлять переменные внутри класса с модификатором private является хорошей практикой.
         * К переменным может быть получен доступ и они могут быть изменены с помощью методов Getter и Setter.
         *
         * -----Getter и Setter-----
         * Методы Getter и Setter используются для эффективной защиты информации, в части касающейся создания классов.
         * Для каждой переменной метод get возвращает ее значение, а метод set устанавливает значение.
         *
         * Getter начинается с get, за ним следует имя переменной, с первой буквой в верхнем регистре.
         * Setter начинается с set, за ним следует имя переменной, с первой буквой в верхнем регистре.
         * Пример getter и setter рассмотрены в папке Finish_2
         * Для удобного создания getter и setter можно использовать клавиши Alt + insert
         *
         * -----КОНСТРУКТОРЫ-----
         * Конструкторы являются специальными методами, которые вызываются при создании объекта и используются для их инициализации.
         * Конструктор может быть использован для задания начального значения для атрибутов объекта.
         *
         * - Имя конструктора должно быть таким же, как и имя класса.
         * - Конструктор не должен иметь явный возвращаемый тип.
         * Пример конструктора рассмотрен в папке Finish_3
         *
         * Один класс может иметь множество конструкторов с различным количеством параметров.
         * Методы setter внутри конструкторов могут быть использованы для установки значений атрибутов.
         * Пример класса со множеством конструкторов рассмотрен в папке Finish_4
         * */
    }
}

