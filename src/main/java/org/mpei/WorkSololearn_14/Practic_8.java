package org.mpei.WorkSololearn_14;

import java.util.stream.IntStream;

public class Practic_8 {
    /**
     * ОСТАНОВКА ПОТОКА
     *
     * Как остановить поток?
     * У класса Thread есть метод
     *
     * @Deprecated(since="1.2", forRemoval=true)
     * public final void stop() { ... }
     * Который как раз останавливает поток. Но он помечен @Deprecated и не рекомендуется к использованию.
     *
     * Почему?
     * Потому что остановить поток посередине какой-то задачи - это слишком жёстко. В каком состоянии будут переменные,
     * с которыми работал поток? А что если поток работал с файлами или БД, они так и останутся в подвешенном состоянии?
     *
     * Поэтому вместо остановки используется другой механизм - прерывания.
     * Потоку можно послать сигнал остановки:
     * t1.interrupt();
     *
     * У каждого объекта Thread есть поле
     * boolean interrupted
     * При вызове interrupt() это поле станет true.
     *
     * Прекратит ли поток, выполнение задачи?
     * Это зависит от самой задачи. Если код внутри потока проверяет флажок и реагирует на его изменение,
     * то да, задача прекратит выполнение.*/
    public static void main(String[] args) {
        Thread t = new Thread(() -> {
            Object[] res = IntStream.range(0, 1000).boxed().toArray();
            System.out.println(res);
        });
        t.start();
        t.interrupt();
        /**Ни один класс Stream API не проверяет флажок прерывания. Поток t проигнорирует interrupt() и спокойно завершится.
         * Сейчас напрямую с потоками и прерываниями почти никто не работает. Но некоторые механизмы java.util.concurrent
         * основаны на прерываниях, поэтому важно понимать:
         * !!! Если код не обрабатывает прерывания, бесполезно использовать метод interrupt.*/
    }
}
