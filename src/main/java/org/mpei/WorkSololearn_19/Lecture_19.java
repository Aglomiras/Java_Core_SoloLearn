package org.mpei.WorkSololearn_19;

public class Lecture_19 {
    /**
     * Что такое Optional?
     * Параметр Optional используется для переноса объектов и обеспечения обработки ссылок на null с помощью различных API-интерфейсов.
     *
     * Пример в Practic_1:
     * У нас есть экземпляр Coffee, в котором мы получаем некоторое количество sugar из экземпляра объекта Sugar.
     * Если мы предположим, что значение количества никогда не устанавливалось в конструкторе Coffee,
     * то coffee.getSugar().getQuantity() вернет исключение NullPointerException.
     *
     * Конечно, мы можем сделать проверку на null. Стоит посмотреть закомментированный код в Practic_1
     * Теперь вроде бы все нормально. Но при написании Java-кода нам лучше избегать реализации проверок null.
     * Давайте посмотрим, как это можно сделать, используя Optional.
     *
     *
     * Как создать Optional?
     * Существует три способа создания объектов Optional:
     * 1) of(T value) — создание экземпляра Optional ненулевого (non-null) объекта.
     * Имейте в виду, что использование of() для ссылки на объект null приведет к появлению NullPointerException.
     * 2) ofNullable(T value) — создание значения Optional для объекта, который может быть нулевым (null).
     * 3) empty() — создание экземпляра Optional, который представляет ссылку на null.
     *
     * Примеры использования каждого способа приведены в Practic_2.
     *
     * Итак, у вас есть объект Optional. А теперь давайте познакомимся с двумя основными методами для Optional:
     * 1) isPresent() — этот метод сообщает вам, содержит ли объект Optional ненулевое (non-null) значение.
     * 2) get() — извлекает значение для Optional с текущим значением. Имейте в виду, что вызов get()
     * для пустого Optional приведет к NullPointerException.
     *
     * Учтите, что если вы используете только get() и isPresent() при работе с Optional, вы многое упускаете! Чтобы это понять,
     * давайте сейчас перепишем приведенный в Practic_1 пример с Optional.
     *
     * Рассмотрим Practic_3:
     * Улучшение проверки Null с помощью Optional
     * Итак, как нам улучшить приведенный выше код? С Optional мы можем понять наличие объекта с помощью isPresent() и получить его с помощью get().
     * Начнем с упаковки результата coffee.getSugar() с Optional и использованием метода isPresent().
     * Это поможет нам определить, возвращает ли getSugar() значение null.
     *
     * Мы можем улучшить результат, используя следующие функции:
     * 1) map(Function<? super T, ? extends U> mapper) — преобразует значение, содержащееся в Optional,
     * с предоставленной функцией. Если параметр Optional пуст, то map() вернет Optional.empty().
     * 2) orElse(T other) — это “специальная” версия метода get(). Она может получить значение, содержащееся в Optional.
     * Однако в случае пустого Optional это вернет значение, переданное в метод orElse().
     *
     * Давайте рассмотрим пример в Practic_4.
     *
     * Мы должны избегать использования Optional в следующих сценариях:
     * 1) В качестве типов параметров для POJO, таких как объекты DTO.
     * Optional не сериализуемы, поэтому их использование в POJO лишает объект возможности сериализации.
     *
     * 2) В качестве аргумента метода. Если аргумент метода может быть null, то с точки зрения чистого кода передача
     * null по-прежнему предпочтительнее, чем передача Optional. Кроме того, вы можете создать перегруженные
     * методы для абстрактной обработки отсутствия аргумента нулевого метода.
     *
     * 3) Для представления объекта Collection, который отсутствует. Коллекции могут быть пустыми,
     * поэтому пустая Collection, как пустой Set или List, должна использоваться для представления Collection без значений.
     * */
}
