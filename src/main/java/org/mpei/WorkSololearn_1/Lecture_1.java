package org.mpei.WorkSololearn_1;

import java.util.Scanner;

public class Lecture_1 {
    /**
     * Java — это один из самых популярных языков программирования.
     * Java подходит для создания Android-приложений, игр, банковских приложений, веб-приложений и многого другого!
     * <p>
     * Слоган Java — "Написанное однажды выполняется везде".
     * Это означает, что один и тот же код Java может выполняться на разных платформах, включая мобильные устройства, настольные компьютеры и другие портативные системы
     * <p>
     * Начнём программировать. Код ниже отправляет слоган Java на экран.
     */
    public static void main(String[] args) {
        System.out.println("Write once, run anywhere!"); //Для того, чтобы вывести текст, необходимы кавычки.
        System.out.println(55); //Для того, чтобы вывести числа, кавычки не нужны.
    }
    /**
     * В программировании инструкция — это одна строка кода, которая выполняет определенную задачу.
     * Таким образом, пример кода, который выводит слоган, представляет собой инструкцию.
     * */

    /**
     * -----ПЕРЕМЕННЫЕ-----
     * Переменные хранят данные для обработки.
     * Переменным задается имя (или идентификатор), например area, age, height, и т.п.
     * Имя уникально идентифицирует каждую переменную, присваивая значение переменной и получая хранящееся в переменной значение.
     * <p>
     * Переменные имеют тип.
     * Несколько примеров:
     * - int: для целых чисел, таких как 123 и -456
     * - double: для чисел с плавающей точкой или действительных чисел с опциональной десятичной точкой и дробной частью
     * в фиксированной или научной нотации, такой как 3.1416, -55.66.
     * - String: для текста, типа "Hello" или "Good Morning!". Текстовые строки заключаются внутри двойных кавычек.
     * <p>
     * Вы можете объявить переменную типа и присвоить ей значение. Пример ниже.
     */

    String name = "David";
    int age = 42;
    double score = 15.9;
    char group = 'Z';

    /**
     * -----КОММЕНТАРИИ-----
     * Целью включения комментариев в ваш код является объяснение, что делает ваша программа.
     * Java поддерживает и однострочные, и многострочные комментарии. Все символы, которые находятся внутри комментариев, игнорируются Java компилятором.
     * <p>
     * 1) Однострочный комментарий начинается с двух косых черт (слэшей) и продолжается до окончания строки.
     */
    int com = 34; //Пример однострочного комментария комментария
    /**
     * 2) Java также поддерживает комментарии, которые занимают несколько строк.
     * Такой комментарий начинается с символа косой черты, за которым следует символ звездочки, и заканчивается символом звездочки,
     * за которым следует символ косой черты.
     * */
    /* Пример
     * многострочного
     * комментария
     * */
    /**
     * Обратите внимание, что Java не поддерживает вложенные многострочные комментарии.
     * Однако, вы можете вложить однострочные комментарии внутри многострочных комментариев.
     * <p>
     * 3) Комментарии документации это специальные комментарии, которые выглядят как многострочные комментарии, но отличаются тем,
     * что они генерируют внешнюю документацию вашего исходного кода.
     * Они начинаются с символа косой черты, за которым следует два символа звездочки,
     * и заканчивается символом звездочки, за которым следует символ косой черты.
     * <p>
     * Javadoc это инструмент, который включен в JDK и используется для генерации документации Java кода в HTML формате из исходного Java кода,
     * которому необходима документация в предопределенном формате.
     * <p>
     * Если комментарий документации начинается более чем с двух символов звездочки, то Javadoc предполагает,
     * что вы хотели создать "блок" вокруг вашего комментария в исходном коде. Дополнительные символы звездочки просто игнорируются.
     * */

    /**
     * -----СЧИТЫВАНИЕ ПОЛЬЗОВАТЕЛЬСКОГО ВВОДА-----
     * В то время как Java предоставляет много различных методов для считывания пользовательского ввода,
     * объект Scanner является наиболее распространенным, и возможно наиболее легким для применения.
     * Импортируйте класс Scanner для использования объекта Scanner.
     * Чтобы использовать класс Scanner, создайте экземпляр класса с помощью следующего синтаксиса.
     */
    Scanner scanner = new Scanner(System.in);
    String str = scanner.nextLine();

    /**
     * Java обеспечивает богатым набором операторов для использования при манипулированиями переменными.
     * Значение, используемое на другой стороне оператора называется операндом.
     * Например, в выражении ниже, числа 6 и 3 являются операндами оператора плюс:
     */
    int x = 6 + 3;
    /**
     * Арифметические операторы Java:
     * + сложение
     * - вычитание
     * * умножение
     * / деление
     * % деление по модулю
     * <p>
     * Оператор / делит одно значение на другое.
     */
    int sum1 = 1000 / 5;
    int sum2 = sum1 / 2;
    int sum3 = sum1 / sum2;
    /**
     * В примере выше, результатом деления будет целое число, так как int используется в качестве типа данных.
     * Вы можете использовать double чтобы получить значение с десятичной точкой.
     * <p>
     * Математическая операция деления по модулю (или остаток) выполняет целочисленное деление одного значения на другое и возвращает остаток от деления.
     * Оператором операции деления по модулю является символ процента (%).
     */
    int value = 23;
    int res = value % 6; // res is 5
    /**
     * -----ОПЕРАТОР ИНКРЕМЕНТА И ДЕКРЕМЕНТА-----
     * Операторы инкремента или декремента предоставляют удобный и компактный способ увеличения или уменьшения значения переменной на единицу.
     * Например, выражение x=x+1; может быть упрощено до вида ++x;
     */
    int test = 5;
    int testes = ++test; // testes is now 6
    /**
     * Оператор декремента (--) используется для уменьшения значения переменной на единицу.
     * Используйте этот оператор с осторожностью, чтобы избежать ошибок расчета.
     * <p>
     * -----ПРЕФИКС И ПОСТФИКС-----
     * Операторы инкремента и декремента могут быть использованы в двух формах, в префиксной и постфиксной.
     * В префиксной форме, операторы находятся перед операндом, а в постфиксной форме операторы находятся после операнда.
     * Ниже представлено разъяснение, как работают обе формы:
     * Префикс: Инкрементирует значение переменной и использует новое значение в выражении.
     */
    int x1 = 34;
    int y1 = ++x1; // y1 is 35
    /**
     * Значение x сначала инкрементируется до 35, и только затем присваивается переменной y, так что теперь значения переменных x и y равны 35.
     * <p>
     * Постфикс: Значение переменной сначала используется в выражении и только затем увеличивается.
     */
    int x2 = 34;
    int y2 = x2++; // y2 is 34
    /**
     * Значение x сначала присваивается переменной y, и затем инкрементируется на единицу.
     * Следовательно, x становится равным 35, а переменной y присвоено значение 34.
     * Оператор декремента работает таким же образом.
     * <p>
     * Сложение и присваивание (+=)
     * Вычитание и присваивание (-=)
     * Подобным образом, Java поддерживает умножение и присваивание (*=),
     * деление и присваивание (/=), и деление по модулю и присваивание (%=).
     * */

    /**
     * -----СТРОКИ (String)-----
     * String это объект, который представляет собой последовательность символов.
     * Например, "Hello" это строка из 5 символов.
     * <p>
     * Вы можете определять пустую строку. Например, String str = "";
     * <p>
     * Оператор + (плюс) между строками складывает их вместе, образуя новую строку. Этот процесс называется конкатенацией.
     * В результате получится строка, состоящая из первой и второй строк.
     * Тип данных char представляет собой один символ.
     */
    public static void main1(String[] args) {
        String firstName, lastName;
        firstName = "David";
        lastName = "Williams";

        System.out.println("My name is " + firstName + " " + lastName); //My name is David Williams
    }

}
