package org.mpei.WorkSololearn_3;

public class Lecture_3 {
    public static void main(String[] args) {
        /**
         * -----МАССИВЫ-----
         *
         * Массив является коллекцией переменных одного типа.
         * Если вам необходимо хранить список значений, например чисел, то вы можете хранить их в массиве, вместо объявления отдельных переменных для каждого числа.
         * Чтобы объявить массив, вам необходимо определить тип элемента с квадратными скобками.
         * Например, чтобы объявить целочисленный массив:
         * */
        int[] arr;
        /**
         * Имя массива arr. Типом содержащихся в нем элементов является int.
         *
         * Теперь вам необходимо определить длину массива, или количество элементов, которые он будет хранить.
         * Чтобы это сделать, используйте ключевое слово new.
         * */
        int[] arr1 = new int[5];
        /**
         * В вышеуказанном коде объявлен массив 5 целых чисел.
         * В массиве все элементы упорядочены и каждый имеет определенную и постоянную позицию, которая называется индексом.
         *
         * Чтобы обратиться к элементу массива, введите имя массива с его индексом в квадратных скобках.
         * */
        arr1[2] = 42;
        /**
         * Таким образом присваивается значение 42 элементу, имеющему индекс 2.
         *
         * Обратите внимание, что элементы массива начинаются с нулевого индекса,
         * что означает, что индексом первого элемента является 0, а не 1.
         * Так что, максимальный индекс массива int[5] это 4.
         *
         * Java имеет сокращенный способ инстанциирования массивов примитивных типов и строк.
         * Если вы уже знаете, какие значения использовать в массиве, то вы можете использовать массив литералов.
         * Пример массива литералов:
         * */
        String[] myNames = {"A", "B", "C", "D"};
        System.out.println(myNames[2]);
        /**
         * Разместите значения в списке разделенном запятыми, закрытым в фигурные скобки.
         * Вышеуказанный код автоматически инициализирует массив, содержащий 4 элемента и сохраняет полученные значения.
         *
         * Иногда вы можете увидеть квадратные скобки, размещенные после имени массива, что также работает,
         * но предпочитаемым способом является размещение скобок после типа данных массива.
         *
         * Вы можете получить доступ к длине массива (количеству хранимых им элементов) с помощью свойства length.
         * Пример:
         * */
        int[] intArr = new int[5];
        System.out.println(intArr.length);
        /**
         * Не забывайте, что в массивах индексы начинаются с 0. В приведенном выше примере последний индекс равен 4.
         *
         * Теперь, мы знаем как задать значения элементов массивов и получить эти значения, мы можем посчитать сумму всех элементов массива, используя циклы.
         * Цикл for наиболее часто используется при работе с массивами, потому что мы можем использовать свойство массива length,
         * чтобы определить, сколько раз запустить цикл.
         * Пример:
         * */
        int[] myArr = {6, 42, 3, 7};
        int sum = 0;
        for (int x = 0; x < myArr.length; x++) {
            sum += myArr[x];
        }
        System.out.println(sum); // 58
        /**
         * В вышеуказанном коде мы объявили переменную sum для хранения результата и присвоили ей 0.
         * Затем мы использовали цикл for для итерации по массиву, и добавили значение каждого элемента переменной.
         * Условием цикла for является x<myArr.length, т.к. индексом последнего элемента является myArr.length-1.
         *
         * -----УЛУЧШЕННЫЙ ЦИКЛ for-----
         * Улучшенный цикл for (иногда называется циклом "for each") используется для перебора элементов в массиве.
         * Преимуществами его использования являются исключение возможности ошибки и улучшение читаемости кода.
         * Пример:
         * */
        int[] primes = {2, 3, 5, 7};
        for (int t : primes) {
            System.out.println(t);
        }
        /**
         * Улучшенный цикл for объявляет переменную типа, совместимого с элементами массива, к которым получен доступ.
         * Переменная будет доступна внутри блока for, и его значение будет идентично текущему элементу массива.
         * Итак, на каждой итерации цикла, переменная t будет равна соответствующему элементу массива.
         * Обратите внимание на двоеточие после переменной в синтаксисе.
         *
         * -----МНОГОМЕРНЫЕ МАССИВЫ-----
         * Многомерными массивами являются массивы, которые содержат другие массивы. Двухмерный массив является наиболее часто применяемым многомерным массивом.
         * Для создания многомерного массива разместите каждый массив внутри своей пары квадратных скобок.
         *
         * Пример двухмерного массива:
         * */
        int[][] sample = {{1, 2, 3}, {4, 5, 6}};
        /**
         * Таким образом объявляется массив с двумя массивами в элементе.
         * Для получения доступа к элементу двухмерного массива необходимо предоставить два индекса, один для массива,
         * а другой для элемента этого массива.
         *
         * Следующий пример получает доступ к первому элементу второго массива.
         * */
        int x = sample[1][0]; //Два индекса массива называются индексом строки и индексом столбца
        System.out.println(x);
        /**
         * Вы можете получить и установить элементы многомерного массива используя такую же пару квадратных скобок.
         * */
        int[ ][ ] myArr1 = { {1, 2, 3}, {4}, {5, 6, 7} };
        myArr1[0][2] = 42;
        int x1 = myArr1[1][0]; // 4
        /**
         * В вышеуказанном двухмерном массиве содержится три массива.
         * Первый массив имеет три элемента, второй имеет один элемент, а третий имеет три элемента.
         * В Java, вы не ограничены использованием только двухмерных массивов. Массивы могут быть вложены внутри массивов на столько уровней,
         * сколько необходимо вашей программе. Чтобы объявить массив с более чем двумя измерениями, вам необходимо добавить столько пар пустых скобок,
         * сколько вам нужно. Однако ими сложно управлять.
         * Помните, что все члены массива должны быть одного типа.*/
    }
}
