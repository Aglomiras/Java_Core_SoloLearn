package org.mpei.WorkSololearn_12;

import java.util.*;

public class Lecture_12 {
    public static void main(String[] args) {
        /**
         * -----HashMap-----
         * Массивы и Списки хранят элементы в виде упорядоченных коллекций, каждый элемент с заданным целочисленным индексом.
         * HashMap используется для хранения коллекций информации в виде пар ключей и значений. Один объект используется в
         * качестве ключа (индекса) к другому объекту (значению).
         * Методы put, remove, и get используются для добавления, удаления и получения доступа к значениям в HashMap.
         * */
        HashMap<String, Integer> points = new HashMap<String, Integer>();
        points.put("Amy", 154);
        points.put("Dave", 42);
        points.put("Rob", 733);
        System.out.println(points.get("Dave"));
        /**
         * Мы создали HashMap с переменными типа String в качестве ключей и переменными типа Integer в качестве значений.
         * Используйте метод get и соответствующий ключ, чтобы получить доступ к элементам HashMap.
         *
         * HashMap не может содержать дубликаты ключей. Добавление нового пункта с существующим ключом переписывает старый элемент.
         * Класс HashMap предоставляет методы containsKey и containsValue которые определяют наличие соответствующего ключа или значения.
         * Если вы попробуете получить значение, которого у вас нет, то вернется значение null.
         * null это специальный тип, который представляет отсутствие значения.
         *
         * -----Sets-----
         * Set это коллекция, которая не может содержать дубликаты элементов. Она моделирует математический набор абстракций.
         * Одной из ее реализаций является класс HashSet.
         * */
        HashSet<String> set = new HashSet<String>();
        set.add("A");
        set.add("B");
        set.add("C");
        System.out.println(set);
        /**
         * Вы можете использовать метод size() чтобы получить количество элементов класса HashSet.
         *
         * -----LinkedHashSet-----
         * Класс HashSet не сохраняет автоматически порядок элементов, в котором они были добавлены.
         * Чтобы упорядочить элементы, используйте LinkedHashSet, который сохраняет связанный список элементов в том порядке, в котором они были добавлены.
         *
         * Что такое хэширование?
         * Хэш-таблица хранит информацию с помощью механизма, называемого хэшированием, в котором ключевое информационное
         * содержимое используется для определения уникального значения, называемого хэш-кодом.
         *
         * Так что, в принципе, каждый элемент в HashSet связан с его уникальным хэш-кодом.
         * Вы изучили информацию о различных типах коллекций в Java, включая Lists, Maps, и Sets. Выбор,
         * какой из них использовать является специфическим для данных, которые необходимо хранить и обрабатывать.
         *
         * -----СОРТИРОВКА СПИСКА-----
         * Для управления информацией в различных типах коллекций, Java API предоставляет класс Collections, который включен в пакет java.util.
         * Наиболее популярным методом класса Collections является метод sort(), который сортирует элементы вашего типа коллекции.
         * Методы в классе Collections являются статическими, так что вам не нужны объекты класса Collections, чтобы их вызвать.
         * */
        ArrayList<String> animals = new ArrayList<String>();
        animals.add("tiger");
        animals.add("cat");
        animals.add("snake");
        animals.add("dog");

        Collections.sort(animals);
        System.out.println(animals); // Как видите, элементы могут быть отсортированы по алфавиту.
        /**
         * Вы можете вызвать методы sort() для различных типов списков, например для Integer.
         * */
        ArrayList<Integer> nums = new ArrayList<Integer>();
        nums.add(3);
        nums.add(36);
        nums.add(73);
        nums.add(40);
        nums.add(1);

        Collections.sort(nums);
        System.out.println(nums);
        /**
         * Другими полезными методами в классе Collections являются:
         * max(Collection c): Возвращает максимальный элемент в c, как определено натуральным упорядочиванием.
         * min(Collection c): Возвращает минимальный элемент в c, как определено натуральным упорядочиванием.
         * reverse(List list): Реверсивно меняет последовательность в списке.
         * shuffle(List list): Перемешивает элементы в списке.
         *
         * -----ИТЕРАТОРЫ-----
         * Iterator это объект, который позволяет циклично проходить через коллекцию, получать или удалять элементы.
         *
         * До того, как вы получите доступ к коллекции с помощью итератора, вы должны получить сам итератор.
         * Каждый класс коллекции предоставляет метод iterator(), который возвращает итератор к началу коллекции.
         * Используя этот объект итератора, вы можете получить доступ к каждому элементу коллекции, по одному элементу за раз.
         *
         * Класс Iterator предоставляет следующие методы:
         * hasNext(): Возвращает “Верно”, если есть еще по крайней мере один элемент; иначе, он вернет “Ложь”.
         * next(): Возвращает следующий объект и перемещает итератор.
         * remove(): Удаляет последний объект, который был возвращен из коллекции методом next.
         *
         * Класс Iterator должен быть импортирован из пакета java.util.
         * */
        LinkedList<String> animals1 = new LinkedList<String>();
        animals1.add("fox");
        animals1.add("cat");
        animals1.add("dog");
        animals1.add("rabbit");

        Iterator<String> it = animals1.iterator();
        String value = it.next();
        System.out.println(value);
        /**
         * it.next() возвращает первый элемент в списке и затем передвигает итератор к следующему элементу.
         * При каждом вызове it.next(), итератор передвигается к следующему элементу списка.
         * */
        System.out.println(it.next());
        System.out.println(it.next());
        System.out.println(it.next());
        /**
         * Обычно, итераторы используются в циклах. При каждой итерации цикла вы можете получить доступ к соответствующему элементу списка.
         * */
        LinkedList<String> animals2 = new LinkedList<String>();
        animals2.add("fox");
        animals2.add("cat");
        animals2.add("dog");
        animals2.add("rabbit");

        Iterator<String> it1 = animals2.iterator();
        while(it1.hasNext()) {
            String value1 = it1.next();
            System.out.println(value1);
        }
        /**
         * Здесь, цикл while определяет, имеет ли итератор дополнительные элементы, выводит значение элемента и перемещает итератор далее.
         * */
    }
}
