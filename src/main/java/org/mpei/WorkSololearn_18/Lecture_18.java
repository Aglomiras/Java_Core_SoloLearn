package org.mpei.WorkSololearn_18;

public class Lecture_18 {
    /**
     * КЛЮЧЕВОЕ СМЛОВО SINCHRONIZED
     *
     * Ключевое слово synchronized гарантирует, что только один поток может зайти в обозначенный участок кода.
     * Пример использования sinchronized рассмотрен в Practic_1
     *
     * Блок кода, в который допускается один поток, называется критической секцией. Она ограничивается фигурными скобками.
     * Объект синхронизации указывается в скобках после слова synchronized. Он помогает "охранять" критическую секцию.
     *
     * Что происходит под капотом?
     * С каждым объектом ассоциирована специфичная структура внутри JVM - монитор. Когда поток входит в synchronized секцию,
     * у монитора прописывается владелец. Это называется захватом монитора. Захват происходит на уровне JVM
     * и недоступен программисту напрямую.
     * Только один поток может владеть монитором. Соответственно только один поток может
     * находиться в synchronized секции.
     *
     * Пример работы sinchronized рассмотрен в Practic_2
     *
     *
     * 3 способа использовать synchronized
     *
     * 1. Обозначить блок кода.
     * В этом случае захватывается монитор объекта, указанного в скобках:
     *
     * private Object lock = new Object();
     * public void smth() {
     *    synchronized (lock) {
     *       // критическая секция
     *    }
     * }
     *
     * 2. Добавить synchronized в сигнатуру метода.
     *
     * public class Example {
     *    public synchronized int getSize() {…}
     * }
     * В этом случае объектом синхронизации становится экземпляр класса, который вызвал синхронизированный метод.
     * Пример выше равноценен следующему:
     *
     * public class Example {
     *    public int getSize() {
     *       synchronized(this) {
     *          // критическая секция
     *       }
     *    }
     * }
     *
     * 3. Добавить synchronized в сигнатуру статического метода.
     *
     * public class Example {
     *   public static synchronized int getSize() {…}
     * }
     * Блокировка в этом случае идёт по объекту Example.class.
     * Код равноценен следующему:
     *
     * public class Example {
     *    public static int getSize() {
     *       synchronized(Example.class) {
     *          // критическая секция
     *       }
     *    }
     * }
     * */
}
